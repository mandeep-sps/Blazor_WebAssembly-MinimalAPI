@page "/users"
@using Radzen
@using Radzen.Blazor
@using System.Linq.Expressions
@inject HttpClient httpClient
@inject NavigationManager navman
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService TooltipService

<h3>Users</h3>
@if (Users != null)
{
    <div class="row">
        <div class="col-6" style="padding:0 1rem 1rem 1rem">
        </div>
        <div class="col-6" style="padding:0 1rem 1rem 1rem">
            <RadzenTextBox Placeholder="Search..." @bind-Value="searchString" Class="float-end" @oninput=@(args => OnChange(args.Value.ToString())) />
        </div>
    </div>

    <RadzenDataList WrapItems="true" AllowPaging="true" Data="@Users" TItem="ApplicationUserDTO">
        <Template Context="User">
            <RadzenCard Style="width:420px; max-width:420px">
                <div class="d-flex flex-row align-items-center">
                    @{
                        var path = "/png/" + @User.Name[0].ToString().ToUpper() + ".png";
                    }
                    <RadzenImage Path="@path" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                    <div class="user-list">
                        <h2 class="mb-0 name">@User.Name</h2>
                        <div class="info">
                            <div class="email">@User.Email</div>
                            <div style="font-size: .8em">@User.ContactNo</div>
                        </div>
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}
else
{
    BusyDialog().GetAwaiter();
}

<style>
    .user-list h3.mb-0.name
    .info {
        letter-spacing: 1px;
    }
</style>

@code {
    public List<ApplicationUserDTO> Users { get; set; }
    public List<ApplicationUserDTO> RGUsers { get; set; }
    private string searchString;

    protected async override Task OnInitializedAsync()
    {
        RGUsers = Users = await httpClient.GetFromJsonAsync<List<ApplicationUserDTO>>(appSettings.MinimalAPI + "accounts");
        DialogService.Close();
    }

    void OnChange(string value)
    {
        this.Users = this.RGUsers.Where(ufe => ufe.Email.Contains(value) ||
                ufe.ContactNo.Contains(value) ||
                ufe.Name.Contains(value)).ToList();
        StateHasChanged();
    }

    void ShowTooltip(ElementReference elementReference, string content, TooltipOptions options = null) => TooltipService.Open(elementReference, content, new TooltipOptions { Position = TooltipPosition.Left });

    private async Task BusyDialog() => await DialogService.OpenAsync("", ds =>
    @<div>
        <div class="row">
            <div class="col text-center p-5">
                @* <RadzenImage Path="https://blazor.radzen.com/images/community.svg" Style="display: block; width: 200px; margin-bottom: 40px;" />*@
                <b>Loading, please wait...</b>
            </div>
        </div>
    </div>
    , new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });


}
