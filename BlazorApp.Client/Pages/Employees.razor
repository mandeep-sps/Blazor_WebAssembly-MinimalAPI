@page "/"

@inject NavigationManager navman
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime

<div class="row">
    <div class="col-sm-10"><h2>Employees</h2></div>
</div>

@if (employees == null)
{
    <SfSpinner Visible="true" Label="Loading..."></SfSpinner>
}
else
{
    <SfGrid @ref="sfGrid" DataSource="@employees" AllowPaging="true" AllowFiltering="true" EnableAdaptiveUI="true" RowHeight="38" AllowSorting="true" Height="410" Width="auto">
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem Type="ItemType.Input" Align="ItemAlign.Right">
                    <Template>
                        <SfTextBox CssClass="e-small" ID="search-grid" FloatLabelType="@FloatLabelType.Auto" Placeholder="Search" Input="OnInput"></SfTextBox>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Type="ItemType.Button" Align="ItemAlign.Left">
                    <Template>
                        <SfButton CssClass="e-info e-success e-small" OnClick='(()=>navman.NavigateTo("/add"))'>Add new record </SfButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridPageSettings PageSize="10" PageSizes="pager" PageCount="3"></GridPageSettings>
        <GridColumns>
            <GridColumn Field=@nameof(EmployeeDTO.EmployeeCode) HeaderText="Employee Code" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" ClipMode="ClipMode.EllipsisWithTooltip" TextAlign="TextAlign.Left"></GridColumn>
            <GridColumn Field=@nameof(EmployeeDTO.Name) HeaderText="Name" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
            <GridColumn Field=@nameof(EmployeeDTO.Email) HeaderText="Email" TextAlign="TextAlign.Left" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
            <GridColumn Field=@nameof(EmployeeDTO.Department) HeaderText="Department" TextAlign="TextAlign.Left" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
            <GridColumn Field=@nameof(EmployeeDTO.Designation) HeaderText="Designation" TextAlign="TextAlign.Left" FilterSettings="@(new FilterSettings { Type = Syncfusion.Blazor.Grids.FilterType.CheckBox })" ClipMode="ClipMode.EllipsisWithTooltip"></GridColumn>
            <GridColumn>
                <Template>
                    @{
                    var Employee = (context as EmployeeDTO);
                    <SfButton IsPrimary="true" OnClick="()=>EditEmployee(Employee.Id)" CssClass="e-outline e-small">Edit </SfButton>
                    <SfButton CssClass="e-danger e-outline e-small" OnClick="()=>ConfirmBtn(Employee.Id)">Delete</SfButton>
                }
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

}

<SfDialog @bind-Visible="ConfirmDlgVisible" Width="300px">
    <DialogTemplates>
        <Header>
            Delete Item
        </Header>
        <Content>
            Are you sure you want to permanently delete this item ?
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Yes" IsPrimary="true" OnClick="@ConfirmDelete" />
        <DialogButton Content="No" OnClick="@HideDialog" />
    </DialogButtons>
</SfDialog>

<style>
    .material .e-dialog {
        height: 270px;
    }

    input#search-grid {
        margin-top: -5px;
    }
</style>

@code {

    private bool ConfirmDlgVisible { get; set; } = false;
    private int ID { get; set; } = 0;
    public List<EmployeeDTO> employees { get; set; }
    private string errorMessage;
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };
    public SfGrid<EmployeeDTO> sfGrid { get; set; }
    public string[] pager { get; set; } = new string[] { "All", "10", "25", "50", "75" };


    protected async override Task OnInitializedAsync()
    {
        employees = await httpClient.GetFromJsonAsync<List<EmployeeDTO>>(appSettings.MinimalAPI + "employees");
    }

    private async Task OnInput(InputEventArgs args)
    {
        await this.sfGrid.SearchAsync(args.Value);
    }

    private async Task DeleteEmployee(int Id)
    {
        using var httpResponse = await httpClient.DeleteAsync(appSettings.MinimalAPI + "employee/" + Id);

        if (!httpResponse.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            errorMessage = httpResponse.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");

        }

        employees = await httpClient.GetFromJsonAsync<List<EmployeeDTO>>(appSettings.MinimalAPI + "employees");
        StateHasChanged();
    }


    private void EditEmployee(int Id)
    {
        navman.NavigateTo("add/" + Id);
    }

    private void ConfirmBtn(int Id)
    {
        ID = Id;
        ConfirmDlgVisible = true;
    }


    private async Task ConfirmDelete(Object e)
    {
        await DeleteEmployee(ID);

        this.ConfirmDlgVisible = false;
    }

    private void HideDialog(Object e)
    {
        ID = 0;
        this.ConfirmDlgVisible = false;
    }

}
